#!/bin/sh

# ==================================================
# IPTV自动发现系统 - 网页界面版
# 版本: 4.0
# 功能: 提供Web界面管理所有IPTV发现功能
# ==================================================

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# 配置变量
WEB_DIR="/www/iptv"
CGI_DIR="/www/cgi-bin/iptv"
CONFIG_DIR="/etc/iptv_discovery"
LOG_DIR="/var/log/iptv_discovery"
BACKUP_DIR="/etc/iptv_discovery/backups"

# 日志函数
log() { echo -e "${GREEN}[INFO]${NC} $(date '+%Y-%m-%d %H:%M:%S') $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $(date '+%Y-%m-%d %H:%M:%S') $1"; }
error() { echo -e "${RED}[ERROR]${NC} $(date '+%Y-%m-%d %H:%M:%S') $1"; exit 1; }
step() { echo -e "${BLUE}[STEP]${NC} $1"; }

# 显示横幅
show_banner() {
    echo -e "${BLUE}"
    echo "================================================"
    echo "      IPTV 自动发现系统 - 网页界面版"
    echo "                  版本 4.0"
    echo "================================================"
    echo -e "${NC}"
    echo "功能特性:"
    echo "  ✓ 完整的Web管理界面"
    echo "  ✓ 实时监控仪表板"
    echo "  ✓ 频道管理和播放列表生成"
    echo "  ✓ 网络质量监控"
    echo "  ✓ 历史数据图表"
    echo "  ✓ 移动设备友好"
    echo ""
}

# 检查系统
check_system() {
    step "检查系统环境..."
    
    if [ ! -f /etc/openwrt_release ]; then
        warn "这个脚本专为 OpenWrt 系统设计"
        echo -n "是否继续安装？(y/N): "
        read -r choice
        if [ "$choice" != "y" ] && [ "$choice" != "Y" ]; then
            exit 1
        fi
    fi
    
    if [ -f /etc/openwrt_release ]; then
        DISTRIB_DESCRIPTION=$(grep 'DISTRIB_DESCRIPTION' /etc/openwrt_release | cut -d'=' -f2 | tr -d '"')
        log "检测到 OpenWrt: $DISTRIB_DESCRIPTION"
    fi
    
    # 检查 uHTTPd
    if [ ! -f /etc/config/uhttpd ]; then
        warn "未检测到 uHTTPd，网页界面可能无法正常工作"
    fi
}

# 检查 root 权限
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        error "请使用 root 权限运行此脚本"
    fi
    log "权限检查通过"
}

# 安装依赖
install_dependencies() {
    step "安装系统依赖..."
    
    # 更新包列表
    log "更新软件包列表..."
    opkg update || warn "包列表更新失败，尝试继续..."
    
    # 检查并安装必要软件包
    local packages="tcpdump curl uhttpd uhttpd-mod-lua"
    for pkg in $packages; do
        if opkg list-installed | grep -q "^$pkg "; then
            log "$pkg 已安装"
        else
            log "安装 $pkg..."
            if opkg install "$pkg"; then
                log "$pkg 安装成功"
            else
                warn "安装 $pkg 失败，请手动安装: opkg install $pkg"
            fi
        fi
    done
}

# 创建目录结构
create_directories() {
    step "创建目录结构..."
    
    for dir in "$WEB_DIR" "$CGI_DIR" "$CONFIG_DIR" "$LOG_DIR" "$BACKUP_DIR" "/tmp/iptv_discovery"; do
        if mkdir -p "$dir"; then
            log "创建目录: $dir"
        else
            error "创建目录失败: $dir"
        fi
    done
}

# 部署网页文件
deploy_web_files() {
    step "部署网页文件..."
    
    # 主页面
    cat > "$WEB_DIR/index.html" << 'EOF'
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IPTV 自动发现系统</title>
    <style>
        :root {
            --primary: #3498db;
            --secondary: #2c3e50;
            --success: #27ae60;
            --warning: #f39c12;
            --danger: #e74c3c;
            --light: #ecf0f1;
            --dark: #2c3e50;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: var(--secondary);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .header p {
            opacity: 0.8;
            font-size: 1.1em;
        }
        
        .nav {
            background: var(--primary);
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .nav button {
            background: none;
            border: none;
            color: white;
            padding: 15px 25px;
            cursor: pointer;
            transition: background 0.3s;
            font-size: 16px;
        }
        
        .nav button:hover {
            background: rgba(255,255,255,0.1);
        }
        
        .nav button.active {
            background: rgba(255,255,255,0.2);
        }
        
        .content {
            padding: 30px;
            min-height: 500px;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .card {
            background: var(--light);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .card h3 {
            color: var(--secondary);
            margin-bottom: 15px;
            border-bottom: 2px solid var(--primary);
            padding-bottom: 10px;
        }
        
        .btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s;
            margin: 5px;
        }
        
        .btn:hover {
            background: #2980b9;
        }
        
        .btn-success {
            background: var(--success);
        }
        
        .btn-warning {
            background: var(--warning);
        }
        
        .btn-danger {
            background: var(--danger);
        }
        
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .status-item {
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }
        
        .status-value {
            font-size: 2em;
            font-weight: bold;
            color: var(--primary);
            margin: 10px 0;
        }
        
        .log-output {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            max-height: 300px;
            overflow-y: auto;
            margin-top: 15px;
        }
        
        .stream-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .stream-item {
            background: white;
            margin: 10px 0;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid var(--primary);
        }
        
        .progress {
            background: #ecf0f1;
            border-radius: 10px;
            overflow: hidden;
            height: 20px;
            margin: 10px 0;
        }
        
        .progress-bar {
            background: var(--primary);
            height: 100%;
            transition: width 0.3s;
        }
        
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 10px;
            }
            
            .nav button {
                padding: 12px 15px;
                font-size: 14px;
            }
            
            .content {
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎬 IPTV 自动发现系统</h1>
            <p>智能监控、分析和配置您的IPTV网络</p>
        </div>
        
        <div class="nav">
            <button class="nav-btn active" data-tab="dashboard">仪表板</button>
            <button class="nav-btn" data-tab="monitor">流量监控</button>
            <button class="nav-btn" data-tab="channels">频道管理</button>
            <button class="nav-btn" data-tab="config">配置生成</button>
            <button class="nav-btn" data-tab="network">网络诊断</button>
            <button class="nav-btn" data-tab="history">历史分析</button>
        </div>
        
        <div class="content">
            <!-- 仪表板 -->
            <div id="dashboard" class="tab-content active">
                <div class="card">
                    <h3>📊 系统概览</h3>
                    <div class="status-grid">
                        <div class="status-item">
                            <div>发现的频道</div>
                            <div class="status-value" id="channels-count">0</div>
                            <div>当前活跃</div>
                        </div>
                        <div class="status-item">
                            <div>监控状态</div>
                            <div class="status-value" id="monitor-status">离线</div>
                            <div>实时状态</div>
                        </div>
                        <div class="status-item">
                            <div>网络接口</div>
                            <div class="status-value" id="interface-status">未知</div>
                            <div>连接状态</div>
                        </div>
                        <div class="status-item">
                            <div>存储使用</div>
                            <div class="status-value" id="storage-usage">0%</div>
                            <div>系统资源</div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <h3>🚀 快速操作</h3>
                    <button class="btn btn-success" onclick="startMonitor()">开始监控</button>
                    <button class="btn" onclick="quickTest()">快速测试</button>
                    <button class="btn" onclick="generatePlaylist()">生成播放列表</button>
                    <button class="btn btn-warning" onclick="stopMonitor()">停止监控</button>
                </div>
                
                <div class="card">
                    <h3>📈 实时日志</h3>
                    <div class="log-output" id="live-logs">
                        <div>系统就绪，等待操作...</div>
                    </div>
                </div>
            </div>
            
            <!-- 流量监控 -->
            <div id="monitor" class="tab-content">
                <div class="card">
                    <h3>📡 流量监控设置</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <div>
                            <label>监控接口:</label>
                            <select id="monitor-interface" style="width: 100%; padding: 10px; margin: 10px 0; border-radius: 5px; border: 1px solid #ddd;">
                                <option value="eth1">eth1</option>
                                <option value="eth0">eth0</option>
                                <option value="br-lan">br-lan</option>
                                <option value="pppoe-wan">pppoe-wan</option>
                            </select>
                        </div>
                        <div>
                            <label>监控时长 (秒):</label>
                            <input type="number" id="monitor-duration" value="180" style="width: 100%; padding: 10px; margin: 10px 0; border-radius: 5px; border: 1px solid #ddd;">
                        </div>
                    </div>
                    <button class="btn btn-success" onclick="startAdvancedMonitor()">开始高级监控</button>
                    <button class="btn" onclick="startRealtimeMonitor()">启动实时监控</button>
                </div>
                
                <div class="card">
                    <h3>📊 监控状态</h3>
                    <div id="monitor-progress" style="display: none;">
                        <div>监控进度:</div>
                        <div class="progress">
                            <div class="progress-bar" id="progress-bar" style="width: 0%"></div>
                        </div>
                        <div id="progress-text">准备开始...</div>
                    </div>
                    <div class="log-output" id="monitor-logs">
                        监控日志将显示在这里...
                    </div>
                </div>
            </div>
            
            <!-- 频道管理 -->
            <div id="channels" class="tab-content">
                <div class="card">
                    <h3>📺 发现的频道</h3>
                    <button class="btn" onclick="loadChannels()">刷新频道列表</button>
                    <button class="btn btn-success" onclick="analyzeChannels()">分析频道</button>
                    <div class="stream-list" id="channels-list">
                        <!-- 频道列表将通过JavaScript动态加载 -->
                    </div>
                </div>
                
                <div class="card">
                    <h3>🔍 频道分析</h3>
                    <div id="channel-analysis">
                        点击"分析频道"按钮开始分析...
                    </div>
                </div>
            </div>
            
            <!-- 配置生成 -->
            <div id="config" class="tab-content">
                <div class="card">
                    <h3>⚙️ 配置生成器</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
                        <button class="btn" onclick="generateConfig('m3u')">M3U播放列表</button>
                        <button class="btn" onclick="generateConfig('igmp')">IGMP配置</button>
                        <button class="btn" onclick="generateConfig('udpxy')">udpxy配置</button>
                        <button class="btn" onclick="generateConfig('xupnpd')">xupnpd配置</button>
                        <button class="btn btn-success" onclick="generateConfig('all')">生成所有配置</button>
                    </div>
                </div>
                
                <div class="card">
                    <h3>📄 生成的配置</h3>
                    <div class="log-output" id="config-output">
                        配置输出将显示在这里...
                    </div>
                </div>
            </div>
            
            <!-- 网络诊断 -->
            <div id="network" class="tab-content">
                <div class="card">
                    <h3>🌐 网络诊断工具</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
                        <button class="btn" onclick="networkTest('eth1')">测试接口 eth1</button>
                        <button class="btn" onclick="networkTest('all')">全面网络测试</button>
                        <button class="btn" onclick="testMulticast()">测试组播流</button>
                    </div>
                </div>
                
                <div class="card">
                    <h3>📊 诊断结果</h3>
                    <div class="log-output" id="network-output">
                        网络诊断结果将显示在这里...
                    </div>
                </div>
            </div>
            
            <!-- 历史分析 -->
            <div id="history" class="tab-content">
                <div class="card">
                    <h3>📊 历史数据分析</h3>
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <label>分析天数:</label>
                        <input type="number" id="history-days" value="7" style="padding: 8px; border-radius: 5px; border: 1px solid #ddd;">
                        <button class="btn" onclick="analyzeHistory()">分析历史数据</button>
                    </div>
                </div>
                
                <div class="card">
                    <h3>📈 分析报告</h3>
                    <div class="log-output" id="history-output">
                        历史分析报告将显示在这里...
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 选项卡切换
        document.querySelectorAll('.nav-btn').forEach(button => {
            button.addEventListener('click', () => {
                // 移除所有active类
                document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
                
                // 添加active类
                button.classList.add('active');
                document.getElementById(button.dataset.tab).classList.add('active');
            });
        });

        // 更新系统状态
        function updateSystemStatus() {
            fetch('/cgi-bin/iptv/status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('channels-count').textContent = data.channels || 0;
                    document.getElementById('monitor-status').textContent = data.monitor_status || '离线';
                    document.getElementById('interface-status').textContent = data.interface || '未知';
                    document.getElementById('storage-usage').textContent = data.storage || '0%';
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        // 开始监控
        function startMonitor() {
            addLog('开始基础监控...');
            fetch('/cgi-bin/iptv/monitor')
                .then(response => response.text())
                .then(data => {
                    addLog('监控完成: ' + data);
                    updateSystemStatus();
                })
                .catch(error => {
                    addLog('监控错误: ' + error);
                });
        }

        // 快速测试
        function quickTest() {
            addLog('开始快速测试...');
            fetch('/cgi-bin/iptv/quicktest')
                .then(response => response.text())
                .then(data => {
                    addLog('测试结果: ' + data);
                })
                .catch(error => {
                    addLog('测试错误: ' + error);
                });
        }

        // 生成播放列表
        function generatePlaylist() {
            addLog('生成播放列表...');
            fetch('/cgi-bin/iptv/generate?type=m3u')
                .then(response => response.text())
                .then(data => {
                    addLog('播放列表生成完成: ' + data);
                })
                .catch(error => {
                    addLog('生成错误: ' + error);
                });
        }

        // 停止监控
        function stopMonitor() {
            addLog('停止监控...');
            fetch('/cgi-bin/iptv/stop')
                .then(response => response.text())
                .then(data => {
                    addLog('监控已停止: ' + data);
                    updateSystemStatus();
                })
                .catch(error => {
                    addLog('停止错误: ' + error);
                });
        }

        // 高级监控
        function startAdvancedMonitor() {
            const interface = document.getElementById('monitor-interface').value;
            const duration = document.getElementById('monitor-duration').value;
            
            addLog(`开始高级监控 - 接口: ${interface}, 时长: ${duration}秒`);
            
            // 显示进度条
            document.getElementById('monitor-progress').style.display = 'block';
            simulateProgress(duration);
            
            fetch(`/cgi-bin/iptv/advanced-monitor?interface=${interface}&duration=${duration}`)
                .then(response => response.text())
                .then(data => {
                    addLog('高级监控完成: ' + data);
                    document.getElementById('monitor-progress').style.display = 'none';
                    updateSystemStatus();
                })
                .catch(error => {
                    addLog('监控错误: ' + error);
                    document.getElementById('monitor-progress').style.display = 'none';
                });
        }

        // 实时监控
        function startRealtimeMonitor() {
            addLog('启动实时监控...');
            fetch('/cgi-bin/iptv/realtime')
                .then(response => response.text())
                .then(data => {
                    addLog('实时监控启动: ' + data);
                    updateSystemStatus();
                })
                .catch(error => {
                    addLog('实时监控错误: ' + error);
                });
        }

        // 加载频道
        function loadChannels() {
            addLog('加载频道列表...');
            fetch('/cgi-bin/iptv/channels')
                .then(response => response.text())
                .then(data => {
                    document.getElementById('channels-list').innerHTML = data;
                    addLog('频道列表加载完成');
                })
                .catch(error => {
                    addLog('加载频道错误: ' + error);
                });
        }

        // 分析频道
        function analyzeChannels() {
            addLog('开始频道分析...');
            fetch('/cgi-bin/iptv/analyze-channels')
                .then(response => response.text())
                .then(data => {
                    document.getElementById('channel-analysis').innerHTML = '<pre>' + data + '</pre>';
                    addLog('频道分析完成');
                })
                .catch(error => {
                    addLog('分析错误: ' + error);
                });
        }

        // 生成配置
        function generateConfig(type) {
            addLog(`生成 ${type} 配置...`);
            fetch(`/cgi-bin/iptv/generate?type=${type}`)
                .then(response => response.text())
                .then(data => {
                    document.getElementById('config-output').innerHTML = '<pre>' + data + '</pre>';
                    addLog(`${type} 配置生成完成`);
                })
                .catch(error => {
                    addLog('配置生成错误: ' + error);
                });
        }

        // 网络测试
        function networkTest(target) {
            addLog(`开始网络测试: ${target}`);
            fetch(`/cgi-bin/iptv/network-test?target=${target}`)
                .then(response => response.text())
                .then(data => {
                    document.getElementById('network-output').innerHTML = '<pre>' + data + '</pre>';
                    addLog('网络测试完成');
                })
                .catch(error => {
                    addLog('网络测试错误: ' + error);
                });
        }

        // 测试组播流
        function testMulticast() {
            const stream = prompt('请输入组播流地址 (格式: 239.1.1.1:10000):');
            if (stream) {
                addLog(`测试组播流: ${stream}`);
                fetch(`/cgi-bin/iptv/test-multicast?stream=${stream}`)
                    .then(response => response.text())
                    .then(data => {
                        document.getElementById('network-output').innerHTML = '<pre>' + data + '</pre>';
                        addLog('组播流测试完成');
                    })
                    .catch(error => {
                        addLog('组播流测试错误: ' + error);
                    });
            }
        }

        // 历史分析
        function analyzeHistory() {
            const days = document.getElementById('history-days').value;
            addLog(`分析最近 ${days} 天的历史数据...`);
            fetch(`/cgi-bin/iptv/history?days=${days}`)
                .then(response => response.text())
                .then(data => {
                    document.getElementById('history-output').innerHTML = '<pre>' + data + '</pre>';
                    addLog('历史分析完成');
                })
                .catch(error => {
                    addLog('历史分析错误: ' + error);
                });
        }

        // 添加日志
        function addLog(message) {
            const logElement = document.getElementById('live-logs');
            const timestamp = new Date().toLocaleTimeString();
            logElement.innerHTML = `<div>[${timestamp}] ${message}</div>` + logElement.innerHTML;
            
            // 同时更新监控日志
            const monitorLogs = document.getElementById('monitor-logs');
            if (monitorLogs) {
                monitorLogs.innerHTML = `<div>[${timestamp}] ${message}</div>` + monitorLogs.innerHTML;
            }
        }

        // 模拟进度条
        function simulateProgress(duration) {
            let progress = 0;
            const interval = setInterval(() => {
                progress += 100 / (duration);
                if (progress >= 100) {
                    progress = 100;
                    clearInterval(interval);
                }
                document.getElementById('progress-bar').style.width = progress + '%';
                document.getElementById('progress-text').textContent = `进度: ${Math.round(progress)}%`;
            }, 1000);
        }

        // 页面加载时初始化
        document.addEventListener('DOMContentLoaded', function() {
            updateSystemStatus();
            setInterval(updateSystemStatus, 10000); // 每10秒更新一次状态
            addLog('IPTV自动发现系统已就绪');
        });
    </script>
</body>
</html>
EOF

    log "主页面部署完成: $WEB_DIR/index.html"
    
    # 创建CGI脚本目录和文件
    deploy_cgi_scripts
}

# 部署CGI脚本
deploy_cgi_scripts() {
    step "部署CGI脚本..."
    
    # 状态检查脚本
    cat > "$CGI_DIR/status" << 'EOF'
#!/bin/sh

echo "Content-type: application/json"
echo ""

# 获取系统状态
{
    # 检查监控进程
    if pgrep -f "iptv-monitor" > /dev/null; then
        MONITOR_STATUS="运行中"
    elif pgrep -f "iptv-realtime" > /dev/null; then
        MONITOR_STATUS="实时监控"
    else
        MONITOR_STATUS="离线"
    fi
    
    # 获取发现的频道数量
    CHANNELS_COUNT=0
    RECENT_FILE=$(ls -t /tmp/iptv_streams_*.txt 2>/dev/null | head -1)
    if [ -n "$RECENT_FILE" ] && [ -f "$RECENT_FILE" ]; then
        CHANNELS_COUNT=$(grep -cE '^[0-9]+\s+[0-9]' "$RECENT_FILE" 2>/dev/null || echo 0)
    fi
    
    # 获取网络接口状态
    INTERFACE=$(grep "^MONITOR_INTERFACE" /etc/iptv_discovery/config 2>/dev/null | cut -d= -f2 || echo "eth1")
    INTERFACE_STATUS="正常"
    if ! ip link show "$INTERFACE" >/dev/null 2>&1; then
        INTERFACE_STATUS="不可用"
    fi
    
    # 获取存储使用情况
    STORAGE_USAGE=$(df -h /tmp | awk 'NR==2 {print $5}' | sed 's/%//')
    
    # 输出JSON
    cat << STATUS_JSON
{
    "channels": $CHANNELS_COUNT,
    "monitor_status": "$MONITOR_STATUS",
    "interface": "$INTERFACE",
    "interface_status": "$INTERFACE_STATUS",
    "storage": "$STORAGE_USAGE%"
}
STATUS_JSON
}
EOF

    # 基础监控脚本
    cat > "$CGI_DIR/monitor" << 'EOF'
#!/bin/sh

echo "Content-type: text/plain"
echo ""

# 启动基础监控
{
    echo "开始IPTV流量监控..."
    /usr/bin/iptv-monitor
    
    # 检查结果
    RECENT_FILE=$(ls -t /tmp/iptv_streams_*.txt 2>/dev/null | head -1)
    if [ -n "$RECENT_FILE" ] && [ -f "$RECENT_FILE" ]; then
        STREAM_COUNT=$(grep -cE '^[0-9]+\s+[0-9]' "$RECENT_FILE" 2>/dev/null || echo 0)
        echo "监控完成，发现 $STREAM_COUNT 个组播流"
        echo "详细结果: $RECENT_FILE"
    else
        echo "监控完成，但未发现组播流"
    fi
}
EOF

    # 快速测试脚本
    cat > "$CGI_DIR/quicktest" << 'EOF'
#!/bin/sh

echo "Content-type: text/plain"
echo ""

# 执行快速测试
{
    echo "=== IPTV系统快速测试 ==="
    echo "开始时间: $(date)"
    echo ""
    
    # 检查核心组件
    echo "1. 组件检查:"
    for cmd in iptv-monitor iptv-analyze iptv-realtime; do
        if command -v "$cmd" >/dev/null 2>&1; then
            echo "   ✓ $cmd"
        else
            echo "   ✗ $cmd"
        fi
    done
    echo ""
    
    # 检查网络接口
    echo "2. 网络接口检查:"
    INTERFACE=$(grep "^MONITOR_INTERFACE" /etc/iptv_discovery/config 2>/dev/null | cut -d= -f2 || echo "eth1")
    if ip link show "$INTERFACE" >/dev/null 2>&1; then
        STATE=$(ip link show "$INTERFACE" | grep -o "state [A-Z]*" | cut -d' ' -f2)
        echo "   接口 $INTERFACE: $STATE"
    else
        echo "   接口 $INTERFACE: 不存在"
    fi
    echo ""
    
    # 快速流量测试
    echo "3. 流量测试:"
    timeout 10 tcpdump -i "$INTERFACE" -c 5 udp 2>/dev/null && \
        echo "   流量捕获: 正常" || \
        echo "   流量捕获: 无流量"
    echo ""
    
    echo "测试完成: $(date)"
}
EOF

    # 停止监控脚本
    cat > "$CGI_DIR/stop" << 'EOF'
#!/bin/sh

echo "Content-type: text/plain"
echo ""

# 停止所有监控进程
{
    echo "停止IPTV监控进程..."
    
    # 停止基础监控
    pkill -f "iptv-monitor"
    
    # 停止实时监控
    pkill -f "iptv-realtime"
    
    # 停止tcpdump进程
    pkill -f "tcpdump.*iptv"
    
    echo "所有监控进程已停止"
    
    # 验证停止
    if pgrep -f "iptv-monitor" > /dev/null || pgrep -f "iptv-realtime" > /dev/null; then
        echo "警告: 某些进程可能仍在运行"
    else
        echo "确认: 所有进程已停止"
    fi
}
EOF

    # 高级监控脚本
    cat > "$CGI_DIR/advanced-monitor" << 'EOF'
#!/bin/sh

echo "Content-type: text/plain"
echo ""

# 获取参数
INTERFACE=$(echo "$QUERY_STRING" | grep -oE 'interface=[^&]+' | cut -d= -f2)
DURATION=$(echo "$QUERY_STRING" | grep -oE 'duration=[^&]+' | cut -d= -f2)

# 设置默认值
INTERFACE=${INTERFACE:-eth1}
DURATION=${DURATION:-180}

# 执行高级监控
{
    echo "开始高级IPTV监控"
    echo "接口: $INTERFACE"
    echo "时长: $DURATION 秒"
    echo ""
    
    # 创建临时配置文件
    TEMP_CONFIG="/tmp/iptv_web_config"
    cat > "$TEMP_CONFIG" << CONFIG_EOF
MONITOR_INTERFACE=$INTERFACE
MONITOR_DURATION=$DURATION
CAPTURE_PACKETS=1000
CONFIG_EOF
    
    # 使用临时配置运行监控
    export CONFIG_FILE="$TEMP_CONFIG"
    /usr/bin/iptv-monitor
    
    # 清理临时文件
    rm -f "$TEMP_CONFIG"
    
    # 显示结果
    RECENT_FILE=$(ls -t /tmp/iptv_streams_*.txt 2>/dev/null | head -1)
    if [ -n "$RECENT_FILE" ] && [ -f "$RECENT_FILE" ]; then
        STREAM_COUNT=$(grep -cE '^[0-9]+\s+[0-9]' "$RECENT_FILE" 2>/dev/null || echo 0)
        echo ""
        echo "监控完成!"
        echo "发现 $STREAM_COUNT 个组播流"
        echo "结果文件: $RECENT_FILE"
    else
        echo ""
        echo "监控完成，但未发现组播流"
    fi
}
EOF

    # 实时监控脚本
    cat > "$CGI_DIR/realtime" << 'EOF'
#!/bin/sh

echo "Content-type: text/plain"
echo ""

# 启动实时监控
{
    echo "启动IPTV实时监控守护进程..."
    
    # 检查是否已在运行
    if pgrep -f "iptv-realtime" > /dev/null; then
        echo "实时监控已在运行 (PID: $(pgrep -f "iptv-realtime"))"
        exit 0
    fi
    
    # 后台启动实时监控
    /usr/bin/iptv-realtime &
    REALTIME_PID=$!
    
    echo "实时监控已启动 (PID: $REALTIME_PID)"
    echo "监控时长: 1小时"
    echo "状态文件: /tmp/iptv_status.json"
    echo ""
    echo "可以使用以下命令查看状态:"
    echo "  cat /tmp/iptv_status.json"
    echo "  tail -f /var/log/iptv_discovery/realtime.log"
}
EOF

    # 频道列表脚本
    cat > "$CGI_DIR/channels" << 'EOF'
#!/bin/sh

echo "Content-type: text/html"
echo ""

# 显示发现的频道列表
{
    RECENT_FILE=$(ls -t /tmp/iptv_streams_*.txt 2>/dev/null | head -1)
    
    if [ -z "$RECENT_FILE" ] || [ ! -f "$RECENT_FILE" ]; then
        echo "<div style='color: #666; text-align: center; padding: 20px;'>"
        echo "未发现频道数据<br>"
        echo "请先运行监控功能"
        echo "</div>"
        exit 0
    fi
    
    echo "<div style='margin-bottom: 15px;'>"
    echo "<strong>数据文件:</strong> $(basename "$RECENT_FILE")"
    echo "</div>"
    
    # 显示前50个频道
    grep -E '^[0-9]+\s+[0-9]' "$RECENT_FILE" | head -50 | while read line; do
        COUNT=$(echo "$line" | awk '{print $1}')
        STREAM=$(echo "$line" | awk '{print $2}')
        echo "<div class='stream-item'>"
        echo "<div style='display: flex; justify-content: space-between;'>"
        echo "<div><strong>$STREAM</strong></div>"
        echo "<div style='color: #27ae60;'>$COUNT 包</div>"
        echo "</div>"
        echo "</div>"
    done
    
    TOTAL_STREAMS=$(grep -cE '^[0-9]+\s+[0-9]' "$RECENT_FILE" 2>/dev/null || echo 0)
    echo "<div style='margin-top: 15px; color: #666; text-align: center;'>"
    echo "共发现 $TOTAL_STREAMS 个频道 (显示前50个)"
    echo "</div>"
}
EOF

    # 频道分析脚本
    cat > "$CGI_DIR/analyze-channels" << 'EOF'
#!/bin/sh

echo "Content-type: text/plain"
echo ""

# 执行频道分析
{
    RECENT_FILE=$(ls -t /tmp/iptv_streams_*.txt 2>/dev/null | head -1)
    
    if [ -z "$RECENT_FILE" ] || [ ! -f "$RECENT_FILE" ]; then
        echo "错误: 未找到频道数据文件"
        echo "请先运行监控功能"
        exit 1
    fi
    
    echo "执行频道分析..."
    echo "输入文件: $RECENT_FILE"
    echo "========================================"
    echo ""
    
    /usr/bin/iptv-analyze-channels "$RECENT_FILE"
}
EOF

    # 配置生成脚本
    cat > "$CGI_DIR/generate" << 'EOF'
#!/bin/sh

echo "Content-type: text/plain"
echo ""

# 获取配置类型
CONFIG_TYPE=$(echo "$QUERY_STRING" | grep -oE 'type=[^&]+' | cut -d= -f2)
CONFIG_TYPE=${CONFIG_TYPE:-m3u}

# 生成配置
{
    case "$CONFIG_TYPE" in
        m3u)
            echo "生成 M3U 播放列表..."
            OUTPUT="/tmp/iptv_playlist_$(date +%Y%m%d_%H%M%S).m3u"
            /usr/bin/iptv-generate-config m3u "$OUTPUT"
            echo ""
            echo "播放列表已生成: $OUTPUT"
            echo ""
            cat "$OUTPUT"
            ;;
        igmp)
            echo "生成 IGMP 配置..."
            OUTPUT="/tmp/igmp_config_$(date +%Y%m%d_%H%M%S).conf"
            /usr/bin/iptv-generate-config igmp "$OUTPUT"
            echo ""
            echo "IGMP配置已生成: $OUTPUT"
            echo ""
            cat "$OUTPUT"
            ;;
        udpxy)
            echo "生成 udpxy 配置..."
            OUTPUT="/tmp/udpxy_config_$(date +%Y%m%d_%H%M%S).conf"
            /usr/bin/iptv-generate-config udpxy "$OUTPUT"
            echo ""
            echo "udpxy配置已生成: $OUTPUT"
            echo ""
            cat "$OUTPUT"
            ;;
        xupnpd)
            echo "生成 xupnpd 配置..."
            OUTPUT="/tmp/xupnpd_config_$(date +%Y%m%d_%H%M%S).lua"
            /usr/bin/iptv-generate-config xupnpd "$OUTPUT"
            echo ""
            echo "xupnpd配置已生成: $OUTPUT"
            echo ""
            cat "$OUTPUT"
            ;;
        all)
            echo "生成所有配置..."
            echo ""
            /usr/bin/iptv-generate-config all
            echo ""
            echo "所有配置已生成到 /tmp/ 目录"
            ;;
        *)
            echo "错误: 未知的配置类型: $CONFIG_TYPE"
            echo "可用的类型: m3u, igmp, udpxy, xupnpd, all"
            ;;
    esac
}
EOF

    # 网络测试脚本
    cat > "$CGI_DIR/network-test" << 'EOF'
#!/bin/sh

echo "Content-type: text/plain"
echo ""

# 获取测试目标
TARGET=$(echo "$QUERY_STRING" | grep -oE 'target=[^&]+' | cut -d= -f2)
TARGET=${TARGET:-eth1}

# 执行网络测试
{
    case "$TARGET" in
        all)
            echo "执行全面网络测试..."
            echo "================================"
            /usr/bin/iptv-network-test all
            ;;
        eth1|eth0|br-lan|pppoe-wan)
            echo "测试网络接口: $TARGET"
            echo "================================"
            /usr/bin/iptv-network-test "$TARGET"
            ;;
        *)
            echo "测试目标: $TARGET"
            echo "================================"
            /usr/bin/iptv-network-test "$TARGET"
            ;;
    esac
}
EOF

    # 组播流测试脚本
    cat > "$CGI_DIR/test-multicast" << 'EOF'
#!/bin/sh

echo "Content-type: text/plain"
echo ""

# 获取组播流地址
STREAM=$(echo "$QUERY_STRING" | grep -oE 'stream=[^&]+' | cut -d= -f2)

if [ -z "$STREAM" ]; then
    echo "错误: 未指定组播流地址"
    echo "用法: ?stream=239.1.1.1:10000"
    exit 1
fi

# 执行组播流测试
{
    echo "测试组播流: $STREAM"
    echo "测试时长: 30秒"
    echo "================================"
    echo ""
    
    /usr/bin/iptv-network-test "$STREAM" 30
}
EOF

    # 历史分析脚本
    cat > "$CGI_DIR/history" << 'EOF'
#!/bin/sh

echo "Content-type: text/plain"
echo ""

# 获取分析天数
DAYS=$(echo "$QUERY_STRING" | grep -oE 'days=[^&]+' | cut -d= -f2)
DAYS=${DAYS:-7}

# 执行历史分析
{
    echo "分析最近 $DAYS 天的历史数据"
    echo "生成时间: $(date)"
    echo "========================================"
    echo ""
    
    /usr/bin/iptv-analyze-history "$DAYS"
}
EOF

    # 设置CGI脚本执行权限
    for script in status monitor quicktest stop advanced-monitor realtime channels analyze-channels generate network-test test-multicast history; do
        chmod +x "$CGI_DIR/$script"
        log "设置执行权限: $CGI_DIR/$script"
    done
    
    log "CGI脚本部署完成"
}

# 配置uHTTPd
configure_uhttpd() {
    step "配置uHTTPd服务器..."
    
    # 检查uHTTPd配置
    if [ ! -f /etc/config/uhttpd ]; then
        warn "uHTTPd配置不存在，创建基本配置..."
        
        cat > /etc/config/uhttpd << UHTTPD_EOF
config uhttpd 'main'
    option listen_http '0.0.0.0:80'
    option home '/www'
    option rfc1918_filter '0'
    option max_requests '3'
    option max_connections '100'
    option cert '/etc/uhttpd.crt'
    option key '/etc/uhttpd.key'
    option cgi_prefix '/cgi-bin'
    option script_timeout '60'
    option network_timeout '30'
    option http_keepalive '20'
    option tcp_keepalive '1'
    option lua_prefix '/lua'
    option lua_handler '/usr/lib/uhttpd_lua.so'

config uhttpd 'iptv'
    option listen_http '0.0.0.0:8080'
    option home '/www/iptv'
    option rfc1918_filter '0'
UHTTPD_EOF
    fi
    
    # 重启uHTTPd
    if /etc/init.d/uhttpd enabled; then
        log "重启uHTTPd服务..."
        /etc/init.d/uhttpd restart
    else
        log "启动uHTTPd服务..."
        /etc/init.d/uhttpd start
        /etc/init.d/uhttpd enable
    fi
    
    log "uHTTPd配置完成"
}

# 安装核心功能
install_core_functions() {
    step "安装核心IPTV功能..."
    
    # 检查是否已安装核心功能
    if [ ! -f "/usr/bin/iptv-monitor" ]; then
        warn "核心IPTV功能未安装，正在安装..."
        
        # 下载并运行基础安装脚本
        if command -v curl >/dev/null 2>&1; then
            curl -s https://raw.githubusercontent.com/example/iptv-discovery/main/install.sh | sh
        else
            warn "无法下载基础安装脚本，请手动安装核心功能"
        fi
    else
        log "核心IPTV功能已安装"
    fi
}

# 验证安装
verify_installation() {
    step "验证安装..."
    
    # 检查网页文件
    local web_files="index.html"
    for file in $web_files; do
        if [ -f "$WEB_DIR/$file" ]; then
            log "✓ 网页文件: $file"
        else
            error "✗ 网页文件缺失: $file"
        fi
    done
    
    # 检查CGI脚本
    local cgi_scripts="status monitor quicktest stop advanced-monitor realtime channels analyze-channels generate network-test test-multicast history"
    for script in $cgi_scripts; do
        if [ -f "$CGI_DIR/$script" ] && [ -x "$CGI_DIR/$script" ]; then
            log "✓ CGI脚本: $script"
        else
            warn "✗ CGI脚本缺失: $script"
        fi
    done
    
    # 检查uHTTPd状态
    if pgrep uhttpd >/dev/null; then
        log "✓ uHTTPd服务运行中"
    else
        warn "✗ uHTTPd服务未运行"
    fi
    
    log "网页界面验证完成"
}

# 显示安装摘要
show_installation_summary() {
    # 获取本地IP地址
    LOCAL_IP=$(ip addr show br-lan 2>/dev/null | grep "inet " | awk '{print $2}' | cut -d/ -f1)
    if [ -z "$LOCAL_IP" ]; then
        LOCAL_IP=$(ip addr show | grep "inet " | grep -v "127.0.0.1" | head -1 | awk '{print $2}' | cut -d/ -f1)
    fi
    
    echo ""
    echo -e "${GREEN}==========================================${NC}"
    echo -e "${GREEN}     IPTV网页界面系统安装完成${NC}"
    echo -e "${GREEN}==========================================${NC}"
    echo ""
    echo -e "${BLUE}访问信息:${NC}"
    echo "------------------------------------------"
    echo "主界面: http://$LOCAL_IP/iptv/"
    echo "备用地址: http://$LOCAL_IP:8080/"
    echo ""
    echo -e "${BLUE}功能特性:${NC}"
    echo "------------------------------------------"
    echo "✓ 实时监控仪表板"
    echo "✓ 频道管理和分析"
    echo "✓ 配置自动生成"
    echo "✓ 网络质量诊断"
    echo "✓ 历史数据分析"
    echo "✓ 移动设备支持"
    echo ""
    echo -e "${BLUE}文件位置:${NC}"
    echo "------------------------------------------"
    echo "网页文件: $WEB_DIR/"
    echo "CGI脚本: $CGI_DIR/"
    echo "配置文件: $CONFIG_DIR/"
    echo "日志文件: $LOG_DIR/"
    echo ""
    echo -e "${BLUE}下一步操作:${NC}"
    echo "------------------------------------------"
    echo "1. 打开浏览器访问: http://$LOCAL_IP/iptv/"
    echo "2. 运行快速测试验证系统"
    echo "3. 开始监控发现IPTV流"
    echo "4. 生成播放列表和配置"
    echo ""
    echo -e "${BLUE}获取帮助:${NC}"
    echo "------------------------------------------"
    echo "查看系统状态: 访问网页仪表板"
    echo "查看日志: tail -f $LOG_DIR/monitor.log"
    echo "重启服务: /etc/init.d/uhttpd restart"
    echo ""
    echo -e "${GREEN}==========================================${NC}"
}

# 主安装函数
main() {
    show_banner
    
    # 执行安装步骤
    check_system
    check_root
    install_dependencies
    create_directories
    deploy_web_files
    configure_uhttpd
    install_core_functions
    verify_installation
    show_installation_summary
    
    echo ""
    log "网页界面安装完成！"
    echo ""
    log "请打开浏览器访问上述地址开始使用"
}

# 运行主函数
main "$@"
