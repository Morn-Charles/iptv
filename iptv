#!/bin/sh

# ==================================================
# IPTV自动发现系统 - 完整一键安装脚本
# 版本: 5.0
# 修复了所有已知问题，提供完整功能
# ==================================================

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# 配置变量
WEB_DIR="/www/iptv"
CGI_DIR="/www/cgi-bin"
CONFIG_DIR="/etc/iptv_discovery"
LOG_DIR="/var/log/iptv_discovery"
SCRIPT_DIR="/usr/bin"

# 日志函数
log() { echo -e "${GREEN}[INFO]${NC} $(date '+%Y-%m-%d %H:%M:%S') $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $(date '+%Y-%m-%d %H:%M:%S') $1"; }
error() { echo -e "${RED}[ERROR]${NC} $(date '+%Y-%m-%d %H:%M:%S') $1"; exit 1; }
step() { echo -e "${BLUE}[STEP]${NC} $1"; }

# 显示横幅
show_banner() {
    echo -e "${BLUE}"
    cat << "BANNER"
╔══════════════════════════════════════════════╗
║           IPTV自动发现系统 v5.0             ║
║                                              ║
║    🎬 智能监控   📊 实时分析   🌐 网页管理   ║
╚══════════════════════════════════════════════╝
BANNER
    echo -e "${NC}"
    echo "功能特性:"
    echo "  ✓ 完整的Web管理界面"
    echo "  ✓ 实时流量监控和分析"
    echo "  ✓ 自动频道发现和分类"
    echo "  ✓ 配置自动生成"
    echo "  ✓ 网络质量诊断"
    echo "  ✓ 历史数据分析"
    echo ""
}

# 检查系统
check_system() {
    step "检查系统环境..."
    
    if [ ! -f /etc/openwrt_release ]; then
        warn "⚠️  这个脚本专为 OpenWrt 系统设计"
        echo -n "是否继续安装？(y/N): "
        read -r choice
        if [ "$choice" != "y" ] && [ "$choice" != "Y" ]; then
            log "安装已取消"
            exit 0
        fi
    fi
    
    if [ -f /etc/openwrt_release ]; then
        . /etc/openwrt_release
        log "✅ 检测到 OpenWrt: $DISTRIB_DESCRIPTION"
    fi
}

# 检查 root 权限
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        error "❌ 请使用 root 权限运行此脚本"
    fi
    log "✅ 权限检查通过"
}

# 检查网络连接
check_network() {
    step "检查网络连接..."
    
    if ping -c 1 -W 3 8.8.8.8 >/dev/null 2>&1; then
        log "✅ 网络连接正常"
    else
        warn "⚠️  网络连接可能有问题，继续安装..."
    fi
}

# 安装依赖
install_dependencies() {
    step "安装系统依赖..."
    
    log "更新软件包列表..."
    opkg update >/dev/null 2>&1 || warn "包列表更新失败，尝试继续..."
    
    local packages="tcpdump curl coreutils-timeout"
    for pkg in $packages; do
        if opkg list-installed | grep -q "^$pkg "; then
            log "✅ $pkg 已安装"
        else
            log "安装 $pkg..."
            if opkg install "$pkg" >/dev/null 2>&1; then
                log "✅ $pkg 安装成功"
            else
                warn "⚠️  安装 $pkg 失败，请手动安装: opkg install $pkg"
            fi
        fi
    done
}

# 创建目录结构
create_directories() {
    step "创建目录结构..."
    
    for dir in "$WEB_DIR" "$CGI_DIR" "$CONFIG_DIR" "$LOG_DIR" "/tmp/iptv_discovery"; do
        if mkdir -p "$dir" 2>/dev/null; then
            log "✅ 创建目录: $dir"
        else
            error "❌ 创建目录失败: $dir"
        fi
    done
}

# 安装核心功能脚本
install_core_scripts() {
    step "安装核心功能脚本..."
    
    # 主监控脚本
    cat > "$SCRIPT_DIR/iptv-monitor" << 'EOF'
#!/bin/sh

# IPTV 流量监控脚本

CONFIG_FILE="/etc/iptv_discovery/config"
if [ -f "$CONFIG_FILE" ]; then
    . "$CONFIG_FILE"
fi

MONITOR_INTERFACE=${MONITOR_INTERFACE:-eth1}
MONITOR_DURATION=${MONITOR_DURATION:-180}
OUTPUT_DIR="/tmp/iptv_discovery"

mkdir -p "$OUTPUT_DIR"

echo "🎬 开始IPTV流量监控"
echo "📡 接口: $MONITOR_INTERFACE"
echo "⏱️  时长: $MONITOR_DURATION 秒"

# 检查接口
if ! ip link show "$MONITOR_INTERFACE" >/dev/null 2>&1; then
    echo "❌ 错误: 接口 $MONITOR_INTERFACE 不存在"
    echo "可用接口:"
    ip link show | grep "^[0-9]:" | awk -F: '{print $2}' | tr -d ' '
    exit 1
fi

# 检查接口状态
INTERFACE_STATE=$(ip link show "$MONITOR_INTERFACE" | grep -o "state [A-Z]*" | cut -d' ' -f2)
if [ "$INTERFACE_STATE" != "UP" ]; then
    echo "⚠️  警告: 接口 $MONITOR_INTERFACE 状态为 $INTERFACE_STATE"
    echo "尝试启用接口..."
    ip link set "$MONITOR_INTERFACE" up 2>/dev/null && echo "✅ 接口已启用" || echo "❌ 接口启用失败"
fi

# 捕获流量
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
PCAP_FILE="$OUTPUT_DIR/iptv_capture_$TIMESTAMP.pcap"
LOG_FILE="$LOG_DIR/monitor_$TIMESTAMP.log"

{
    echo "========================================"
    echo "IPTV流量监控报告"
    echo "开始时间: $(date)"
    echo "接口: $MONITOR_INTERFACE"
    echo "时长: $MONITOR_DURATION 秒"
    echo "========================================"
    
    echo "📡 开始捕获流量..."
    timeout "$MONITOR_DURATION" tcpdump -i "$MONITOR_INTERFACE" -w "$PCAP_FILE" -c 500 udp and portrange 10000-65000 2>&1
    
    if [ ! -f "$PCAP_FILE" ] || [ ! -s "$PCAP_FILE" ]; then
        echo "❌ 错误: 未捕获到流量数据"
        echo "可能的原因:"
        echo "  - 接口 $MONITOR_INTERFACE 没有流量"
        echo "  - 监控时长太短"
        echo "  - 网络连接问题"
        exit 1
    fi
    
    echo "🔍 分析捕获的流量..."
    echo "文件大小: $(du -h "$PCAP_FILE" | cut -f1)"
    
    # 提取组播流
    MULTICAST_STREAMS=$(tcpdump -nn -r "$PCAP_FILE" udp 2>/dev/null | \
        grep -oE '> ([0-9]{1,3}\.){3}[0-9]{1,3}\.[0-9]{1,5}' | \
        sed 's/> //' | \
        grep -E '^22[0-9]|^23[0-9]|^239' | \
        sort | uniq -c | sort -nr)
    
    OUTPUT_FILE="/tmp/iptv_streams_$TIMESTAMP.txt"
    
    {
        echo "========================================"
        echo "IPTV组播流发现报告"
        echo "生成时间: $(date)"
        echo "监控接口: $MONITOR_INTERFACE"
        echo "监控时长: $MONITOR_DURATION 秒"
        echo "捕获文件: $PCAP_FILE"
        echo "========================================"
        echo ""
        echo "📊 发现的组播流:"
        echo "----------------"
        if [ -n "$MULTICAST_STREAMS" ]; then
            echo "计数 | IP地址:端口"
            echo "----------------"
            echo "$MULTICAST_STREAMS"
        else
            echo "❌ 未发现组播流"
        fi
    } > "$OUTPUT_FILE"
    
    # 显示结果
    STREAM_COUNT=$(echo "$MULTICAST_STREAMS" | grep -c . 2>/dev/null || echo 0)
    echo ""
    echo "========================================"
    if [ "$STREAM_COUNT" -gt 0 ]; then
        echo "✅ 监控完成!"
        echo "📺 发现 $STREAM_COUNT 个组播流"
        echo "📄 报告文件: $OUTPUT_FILE"
        echo "💾 抓包文件: $PCAP_FILE"
        
        # 显示前5个流
        echo ""
        echo "🏆 最活跃的流:"
        echo "$MULTICAST_STREAMS" | head -5
    else
        echo "⚠️  监控完成，但未发现组播流"
        echo "💡 建议:"
        echo "  - 检查网络连接"
        echo "  - 确认IPTV信号正常"
        echo "  - 增加监控时长"
        echo "  - 尝试其他网络接口"
    fi
    echo "========================================"
    
} | tee "$LOG_FILE"

echo "📝 详细日志: $LOG_FILE"
EOF

    # 流量分析脚本
    cat > "$SCRIPT_DIR/iptv-analyze" << 'EOF'
#!/bin/sh

# IPTV 流量分析脚本

PCAP_FILE="$1"

if [ -z "$PCAP_FILE" ] || [ ! -f "$PCAP_FILE" ]; then
    echo "❌ 用法: $0 <pcap文件>"
    echo ""
    echo "示例:"
    echo "  $0 /tmp/iptv_discovery/iptv_capture_20231201_120000.pcap"
    echo ""
    echo "可用的抓包文件:"
    ls -la /tmp/iptv_discovery/iptv_capture_*.pcap 2>/dev/null | head -5
    exit 1
fi

echo "🔍 分析 IPTV 流量: $PCAP_FILE"
echo "📊 文件大小: $(du -h "$PCAP_FILE" | cut -f1)"
echo "========================================"

# 检查文件是否为空
if [ ! -s "$PCAP_FILE" ]; then
    echo "❌ 错误: 捕获文件为空"
    exit 1
fi

# 提取 UDP 流信息
echo "📡 分析组播流量..."
MULTICAST_STREAMS=$(tcpdump -nn -r "$PCAP_FILE" udp 2>/dev/null | \
    grep -oE '> ([0-9]{1,3}\.){3}[0-9]{1,3}\.[0-9]{1,5}' | \
    sed 's/> //' | \
    grep -E '^22[0-9]|^23[0-9]|^239' | \
    sort | uniq -c | sort -nr)

OUTPUT_FILE="/tmp/iptv_analysis_$(date +%Y%m%d_%H%M%S).txt"

if [ -n "$MULTICAST_STREAMS" ]; then
    {
        echo "IPTV 流量分析报告"
        echo "生成时间: $(date)"
        echo "分析文件: $PCAP_FILE"
        echo "========================================"
        echo ""
        echo "📺 发现的组播流:"
        echo "========================"
        echo "计数 | IP地址:端口"
        echo "----------------"
        echo "$MULTICAST_STREAMS"
        echo ""
        echo "📊 统计信息:"
        echo "========================"
        TOTAL_STREAMS=$(echo "$MULTICAST_STREAMS" | wc -l)
        echo "总流数量: $TOTAL_STREAMS"
        
        # 显示前10个最活跃的流
        echo ""
        echo "🏆 最活跃的前10个流:"
        echo "$MULTICAST_STREAMS" | head -10
    } > "$OUTPUT_FILE"
    
    echo ""
    echo "✅ 分析完成!"
    echo "📄 报告文件: $OUTPUT_FILE"
    echo ""
    echo "📺 发现的组播流:"
    echo "========================"
    echo "$MULTICAST_STREAMS" | head -15
    echo ""
    echo "📊 共发现 $TOTAL_STREAMS 个组播流"
    
else
    echo ""
    echo "❌ 未发现明显的 IPTV 组播流量"
    echo ""
    echo "💡 可能的原因:"
    echo "  1. 选择的接口不正确"
    echo "  2. 监控期间没有 IPTV 流量"
    echo "  3. 过滤规则过于严格"
    echo "  4. 网络连接问题"
fi

# 显示基础统计
echo ""
echo "📈 流量统计摘要:"
tcpdump -nn -r "$PCAP_FILE" 2>/dev/null | awk '
    {
        proto = $1
        if (proto == "IP") {
            src = $3
            dst = $5
            gsub(/[.:][0-9]*$/, "", src)
            gsub(/[.:][0-9]*$/, "", dst)
            if (src != "" && dst != "") {
                count[src" -> "dst]++
                protocols[proto]++
            }
        }
    }
    END {
        print "🌐 流量分布:"
        for (flow in count) {
            if (count[flow] > 1) {
                print "  " count[flow] " 包: " flow
            }
        }
    }' | head -8
EOF

    # 快速测试脚本
    cat > "$SCRIPT_DIR/iptv-quicktest" << 'EOF'
#!/bin/sh

# IPTV 快速测试脚本

echo "🧪 IPTV 快速测试开始..."
echo "⏱️  时间: $(date)"
echo "========================================"

# 配置读取函数
get_config() {
    local key="$1"
    local default="$2"
    local value
    
    if [ -f "/etc/iptv_discovery/config" ]; then
        value=$(grep "^$key=" "/etc/iptv_discovery/config" | cut -d'=' -f2-)
        if [ -n "$value" ]; then
            echo "$value"
            return 0
        fi
    fi
    
    echo "$default"
}

INTERFACE=$(get_config "MONITOR_INTERFACE" "eth1")

echo ""
echo "1. 🔧 系统组件检查:"
echo "------------------"
for component in iptv-monitor iptv-analyze tcpdump; do
    if command -v "$component" >/dev/null 2>&1; then
        echo "   ✅ $component"
    else
        echo "   ❌ $component"
    fi
done

echo ""
echo "2. 🌐 网络接口检查:"
echo "------------------"
echo "   监控接口: $INTERFACE"

if ip link show "$INTERFACE" >/dev/null 2>&1; then
    STATE=$(ip link show "$INTERFACE" | grep -o "state [A-Z]*" | cut -d' ' -f2)
    echo "   接口状态: $STATE"
    
    IP_ADDR=$(ip addr show "$INTERFACE" | grep "inet " | awk '{print $2}' | head -1)
    if [ -n "$IP_ADDR" ]; then
        echo "   IP地址: $IP_ADDR"
    else
        echo "   IP地址: ❌ 无"
    fi
else
    echo "   接口状态: ❌ 不存在"
fi

echo ""
echo "3. 📡 流量捕获测试:"
echo "------------------"
echo "   开始10秒快速流量测试..."
timeout 10 tcpdump -i "$INTERFACE" -c 5 udp 2>/dev/null && \
    echo "   ✅ 流量捕获: 正常" || \
    echo "   ❌ 流量捕获: 无流量"

echo ""
echo "4. 📁 目录和权限检查:"
echo "------------------"
for dir in /www/iptv /www/cgi-bin /etc/iptv_discovery /var/log/iptv_discovery; do
    if [ -d "$dir" ]; then
        echo "   ✅ $dir"
    else
        echo "   ❌ $dir"
    fi
done

echo ""
echo "5. 🔗 Web服务检查:"
echo "------------------"
if pgrep uhttpd >/dev/null; then
    echo "   ✅ uHTTPd服务: 运行中"
else
    echo "   ❌ uHTTPd服务: 未运行"
fi

echo ""
echo "========================================"
echo "✅ 快速测试完成: $(date)"
echo ""
echo "💡 下一步:"
echo "  运行 'iptv-monitor' 开始监控"
echo "  访问 http://你的路由器IP/iptv/ 使用网页界面"
EOF

    # 实时监控脚本
    cat > "$SCRIPT_DIR/iptv-realtime" << 'EOF'
#!/bin/sh

# IPTV 实时监控守护进程

CONFIG_FILE="/etc/iptv_discovery/config"
if [ -f "$CONFIG_FILE" ]; then
    . "$CONFIG_FILE"
fi

MONITOR_INTERFACE=${MONITOR_INTERFACE:-eth1}
REALTIME_DURATION=${REALTIME_DURATION:-3600}

LOG_FILE="/var/log/iptv_discovery/realtime.log"
STATUS_FILE="/tmp/iptv_status.json"

# 日志函数
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# 创建状态文件
create_status_file() {
    cat > "$STATUS_FILE" << STATUS_EOF
{
    "status": "running",
    "start_time": "$(date)",
    "interface": "$MONITOR_INTERFACE",
    "streams_found": 0,
    "last_update": "$(date)"
}
STATUS_EOF
}

# 检查接口
check_interface() {
    if ! ip link show "$MONITOR_INTERFACE" >/dev/null 2>&1; then
        log "❌ 错误: 网络接口 $MONITOR_INTERFACE 不存在"
        exit 1
    fi
}

log "🚀 启动 IPTV 实时监控守护进程"
log "📡 监控接口: $MONITOR_INTERFACE"
log "⏱️  运行时长: $REALTIME_DURATION 秒"

# 创建状态文件
create_status_file

# 检查接口
check_interface

# 主监控循环
END_TIME=$(( $(date +%s) + REALTIME_DURATION ))
while [ $(date +%s) -lt $END_TIME ]; do
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    TEMP_PCAP="/tmp/iptv_realtime_$TIMESTAMP.pcap"
    
    # 捕获30秒流量
    log "📡 捕获实时流量..."
    timeout 30 tcpdump -i "$MONITOR_INTERFACE" -w "$TEMP_PCAP" -c 200 udp 2>/dev/null || true
    
    if [ -f "$TEMP_PCAP" ] && [ -s "$TEMP_PCAP" ]; then
        # 分析流量
        STREAMS=$(tcpdump -nn -r "$TEMP_PCAP" udp 2>/dev/null | \
            grep -oE '> ([0-9]{1,3}\.){3}[0-9]{1,3}\.[0-9]{1,5}' | \
            sed 's/> //' | \
            grep -E '^22[0-9]|^23[0-9]|^239' | \
            sort | uniq | head -10)
        
        STREAM_COUNT=$(echo "$STREAMS" | grep -c . 2>/dev/null || echo 0)
        
        if [ "$STREAM_COUNT" -gt 0 ]; then
            log "✅ 发现 $STREAM_COUNT 个活跃组播流"
            
            # 更新状态文件
            cat > "$STATUS_FILE" << STATUS_EOF
{
    "status": "running",
    "start_time": "$(date)",
    "interface": "$MONITOR_INTERFACE",
    "streams_found": $STREAM_COUNT,
    "last_update": "$(date)",
    "sample_streams": "$(echo "$STREAMS" | head -3 | tr '\n' ' ')"
}
STATUS_EOF
        else
            log "⚠️  未发现活跃组播流"
        fi
        
        # 清理临时文件
        rm -f "$TEMP_PCAP"
    else
        log "❌ 流量捕获失败"
    fi
    
    sleep 10
done

log "✅ 实时监控完成"
cat > "$STATUS_FILE" << STATUS_EOF
{
    "status": "completed",
    "start_time": "$(date)",
    "end_time": "$(date)",
    "streams_found": 0
}
STATUS_EOF
EOF

    # 配置生成脚本
    cat > "$SCRIPT_DIR/iptv-generate-config" << 'EOF'
#!/bin/sh

# IPTV 配置生成器

CONFIG_TYPE="$1"
OUTPUT_FILE="$2"

if [ -z "$CONFIG_TYPE" ]; then
    echo "🎛️  IPTV 配置生成器"
    echo ""
    echo "用法: $0 <配置类型> [输出文件]"
    echo ""
    echo "可用的配置类型:"
    echo "  m3u       - M3U 播放列表"
    echo "  igmp      - IGMP 代理配置"
    echo "  udpxy     - udpxy 配置"
    echo "  all       - 生成所有配置"
    echo ""
    echo "示例:"
    echo "  $0 m3u /tmp/iptv_playlist.m3u"
    echo "  $0 all"
    exit 1
fi

if [ -z "$OUTPUT_FILE" ]; then
    case "$CONFIG_TYPE" in
        m3u) OUTPUT_FILE="/tmp/iptv_playlist_$(date +%Y%m%d_%H%M%S).m3u" ;;
        igmp) OUTPUT_FILE="/tmp/igmp_config_$(date +%Y%m%d_%H%M%S).conf" ;;
        udpxy) OUTPUT_FILE="/tmp/udpxy_config_$(date +%Y%m%d_%H%M%S).conf" ;;
        *) OUTPUT_FILE="/tmp/iptv_${CONFIG_TYPE}_$(date +%Y%m%d_%H%M%S).conf" ;;
    esac
fi

# 获取网络配置
get_network_config() {
    local interface
    interface=$(grep "^MONITOR_INTERFACE" /etc/iptv_discovery/config 2>/dev/null | cut -d= -f2 || echo "eth1")
    local lan_ip=$(ip addr show br-lan 2>/dev/null | grep "inet " | awk '{print $2}' | cut -d/ -f1 | head -1)
    if [ -z "$lan_ip" ]; then
        lan_ip="192.168.1.1"
    fi
    
    echo "$interface,$lan_ip"
}

echo "⚙️  生成 IPTV 配置: $CONFIG_TYPE"
echo "📄 输出文件: $OUTPUT_FILE"

case "$CONFIG_TYPE" in
    m3u)
        echo "📺 生成 M3U 播放列表..."
        {
            echo "#EXTM3U"
            echo "# IPTV Playlist"
            echo "# Generated: $(date)"
            echo "# By IPTV Discovery System"
            echo ""
            
            # 查找最近的流文件
            RECENT_FILE=$(ls -t /tmp/iptv_streams_*.txt 2>/dev/null | head -1)
            if [ -n "$RECENT_FILE" ] && [ -f "$RECENT_FILE" ]; then
                grep -E '^[0-9]+\s+[0-9]' "$RECENT_FILE" | head -20 | while read line; do
                    STREAM=$(echo "$line" | awk '{print $2}')
                    COUNT=$(echo "$line" | awk '{print $1}')
                    echo "#EXTINF:-1,Channel - $STREAM ($COUNT packets)"
                    echo "udp://$STREAM"
                    echo ""
                done
                echo "# Total channels: $(grep -cE '^[0-9]+\s+[0-9]' "$RECENT_FILE" 2>/dev/null || echo 0)"
            else
                # 生成示例
                echo "#EXTINF:-1,Example HD Channel 1"
                echo "udp://239.1.1.1:10000"
                echo ""
                echo "#EXTINF:-1,Example HD Channel 2"
                echo "udp://239.1.1.2:10001"
                echo ""
                echo "#EXTINF:-1,Example SD Channel 1"
                echo "udp://239.1.2.1:20000"
            fi
        } > "$OUTPUT_FILE"
        echo "✅ M3U播放列表已生成: $OUTPUT_FILE"
        ;;
        
    igmp)
        echo "🌐 生成 IGMP 配置..."
        {
            echo "# IGMP Proxy Configuration"
            echo "# Generated: $(date)"
            echo ""
            echo "config igmpproxy"
            echo "    option quickleave 1"
            echo ""
            echo "config phyint"
            echo "    option network wan"
            echo "    option zone wan"
            echo "    option direction upstream"
            echo "    list altnet 0.0.0.0/0"
            echo ""
            echo "config phyint"
            echo "    option network lan"
            echo "    option zone lan"
            echo "    option direction downstream"
        } > "$OUTPUT_FILE"
        echo "✅ IGMP配置已生成: $OUTPUT_FILE"
        ;;
        
    udpxy)
        echo "🔄 生成 udpxy 配置..."
        NETWORK_CONFIG=$(get_network_config)
        LAN_IP=$(echo "$NETWORK_CONFIG" | cut -d, -f2)
        
        {
            echo "# udpxy Configuration"
            echo "# Generated: $(date)"
            echo ""
            echo "config udpxy"
            echo "    option disabled 0"
            echo "    option respawn 1"
            echo "    option verbose 0"
            echo "    option status 1"
            echo "    option bind $LAN_IP"
            echo "    option port 4022"
            echo "    option source eth1"
            echo "    option mcsub_renew 60"
        } > "$OUTPUT_FILE"
        echo "✅ udpxy配置已生成: $OUTPUT_FILE"
        ;;
        
    all)
        echo "🎯 生成所有配置..."
        $0 m3u "/tmp/iptv_playlist_$(date +%Y%m%d_%H%M%S).m3u"
        $0 igmp "/tmp/igmp_config_$(date +%Y%m%d_%H%M%S).conf"
        $0 udpxy "/tmp/udpxy_config_$(date +%Y%m%d_%H%M%S).conf"
        echo ""
        echo "✅ 所有配置已生成到 /tmp/ 目录"
        echo ""
        ls -la /tmp/iptv_* /tmp/igmp_* /tmp/udpxy_* 2>/dev/null
        ;;
        
    *)
        echo "❌ 错误: 未知的配置类型: $CONFIG_TYPE"
        echo "使用 'm3u', 'igmp', 'udpxy' 或 'all'"
        exit 1
        ;;
esac

echo ""
echo "🎉 配置生成完成!"
EOF

    # 设置执行权限
    for script in iptv-monitor iptv-analyze iptv-quicktest iptv-realtime iptv-generate-config; do
        chmod +x "$SCRIPT_DIR/$script"
        log "✅ 设置执行权限: $script"
    done
    
    log "✅ 核心功能脚本安装完成"
}

# 安装网页界面
install_web_interface() {
    step "安装网页界面..."
    
    # 主页面
    cat > "$WEB_DIR/index.html" << 'EOF'
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IPTV 自动发现系统</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 300;
        }
        .header p {
            opacity: 0.9;
            font-size: 1.1em;
        }
        .nav {
            background: #3498db;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
        .nav-btn {
            background: none;
            border: none;
            color: white;
            padding: 15px 25px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 16px;
            border-bottom: 3px solid transparent;
        }
        .nav-btn:hover {
            background: rgba(255,255,255,0.1);
        }
        .nav-btn.active {
            background: rgba(255,255,255,0.2);
            border-bottom-color: #e74c3c;
        }
        .content {
            padding: 30px;
            min-height: 500px;
        }
        .tab-content {
            display: none;
            animation: fadeIn 0.5s;
        }
        .tab-content.active {
            display: block;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .card {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 25px;
            border-left: 5px solid #3498db;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }
        .card h3 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.3em;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s;
            margin: 5px;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        .btn:hover {
            background: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .btn-success { background: #27ae60; }
        .btn-success:hover { background: #219a52; }
        .btn-warning { background: #f39c12; }
        .btn-warning:hover { background: #e67e22; }
        .btn-danger { background: #e74c3c; }
        .btn-danger:hover { background: #c0392b; }
        .log-output {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 20px;
            border-radius: 8px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            max-height: 400px;
            overflow-y: auto;
            line-height: 1.4;
        }
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .status-item {
            background: white;
            padding: 25px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }
        .status-item:hover {
            transform: translateY(-5px);
        }
        .status-value {
            font-size: 2.5em;
            font-weight: bold;
            color: #3498db;
            margin: 15px 0;
        }
        .progress {
            background: #ecf0f1;
            border-radius: 10px;
            overflow: hidden;
            height: 20px;
            margin: 15px 0;
        }
        .progress-bar {
            background: linear-gradient(90deg, #3498db, #2ecc71);
            height: 100%;
            transition: width 0.3s;
        }
        .stream-item {
            background: white;
            margin: 10px 0;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #3498db;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 10px;
            }
            .nav-btn {
                padding: 12px 15px;
                font-size: 14px;
            }
            .content {
                padding: 20px;
            }
            .status-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎬 IPTV 自动发现系统</h1>
            <p>智能监控、分析和配置您的IPTV网络</p>
        </div>
        
        <div class="nav">
            <button class="nav-btn active" data-tab="dashboard">📊 仪表板</button>
            <button class="nav-btn" data-tab="monitor">📡 流量监控</button>
            <button class="nav-btn" data-tab="channels">📺 频道管理</button>
            <button class="nav-btn" data-tab="config">⚙️ 配置生成</button>
            <button class="nav-btn" data-tab="tools">🔧 系统工具</button>
        </div>
        
        <div class="content">
            <!-- 仪表板 -->
            <div id="dashboard" class="tab-content active">
                <div class="card">
                    <h3>📊 系统概览</h3>
                    <div class="status-grid">
                        <div class="status-item">
                            <div>系统状态</div>
                            <div class="status-value" id="system-status">就绪</div>
                            <div>IPTV发现系统</div>
                        </div>
                        <div class="status-item">
                            <div>网络接口</div>
                            <div class="status-value" id="interface-status">eth1</div>
                            <div>监控接口</div>
                        </div>
                        <div class="status-item">
                            <div>最近发现</div>
                            <div class="status-value" id="channels-count">0</div>
                            <div>频道数量</div>
                        </div>
                        <div class="status-item">
                            <div>运行时间</div>
                            <div class="status-value" id="uptime-status">--</div>
                            <div>系统状态</div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <h3>🚀 快速操作</h3>
                    <button class="btn btn-success" onclick="runCommand('monitor')">
                        <span>▶️</span>开始监控
                    </button>
                    <button class="btn" onclick="runCommand('quicktest')">
                        <span>🧪</span>快速测试
                    </button>
                    <button class="btn" onclick="runCommand('generate-m3u')">
                        <span>📺</span>生成播放列表
                    </button>
                    <button class="btn btn-warning" onclick="runCommand('stop')">
                        <span>⏹️</span>停止监控
                    </button>
                </div>
                
                <div class="card">
                    <h3>📝 操作日志</h3>
                    <div class="log-output" id="output">
🚀 IPTV自动发现系统已就绪
💡 选择左侧功能开始使用...
⏰ 系统时间: <span id="current-time"></span>
                    </div>
                </div>
            </div>
            
            <!-- 流量监控 -->
            <div id="monitor" class="tab-content">
                <div class="card">
                    <h3>📡 流量监控</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                        <div>
                            <label><strong>监控接口:</strong></label>
                            <select id="monitor-interface" style="width: 100%; padding: 12px; margin: 10px 0; border-radius: 8px; border: 2px solid #ddd;">
                                <option value="eth1">eth1 (推荐)</option>
                                <option value="eth0">eth0</option>
                                <option value="br-lan">br-lan</option>
                                <option value="pppoe-wan">pppoe-wan</option>
                            </select>
                        </div>
                        <div>
                            <label><strong>监控时长 (秒):</strong></label>
                            <input type="number" id="monitor-duration" value="180" style="width: 100%; padding: 12px; margin: 10px 0; border-radius: 8px; border: 2px solid #ddd;">
                        </div>
                    </div>
                    <button class="btn btn-success" onclick="startAdvancedMonitor()">
                        <span>📡</span>开始监控
                    </button>
                    <button class="btn" onclick="runCommand('realtime')">
                        <span>🔴</span>实时监控
                    </button>
                </div>
                
                <div class="card">
                    <h3>📊 监控状态</h3>
                    <div id="progress-container" style="display: none;">
                        <div style="display: flex; justify-content: between; align-items: center; margin: 10px 0;">
                            <span>监控进度:</span>
                            <span id="progress-text" style="font-weight: bold;">0%</span>
                        </div>
                        <div class="progress">
                            <div class="progress-bar" id="progress-bar" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="log-output" id="monitor-output">
等待开始监控...
                    </div>
                </div>
            </div>
            
            <!-- 频道管理 -->
            <div id="channels" class="tab-content">
                <div class="card">
                    <h3>📺 频道管理</h3>
                    <button class="btn" onclick="runCommand('list-channels')">
                        <span>🔄</span>刷新频道列表
                    </button>
                    <button class="btn btn-success" onclick="runCommand('analyze-channels')">
                        <span>🔍</span>分析频道
                    </button>
                </div>
                
                <div class="card">
                    <h3>🔍 频道列表</h3>
                    <div class="log-output" id="channels-output">
点击"刷新频道列表"加载数据...
                    </div>
                </div>
            </div>
            
            <!-- 配置生成 -->
            <div id="config" class="tab-content">
                <div class="card">
                    <h3>⚙️ 配置生成器</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                        <button class="btn" onclick="runCommand('generate-m3u')">
                            <span>📺</span>M3U播放列表
                        </button>
                        <button class="btn" onclick="runCommand('generate-igmp')">
                            <span>🌐</span>IGMP配置
                        </button>
                        <button class="btn" onclick="runCommand('generate-udpxy')">
                            <span>🔄</span>udpxy配置
                        </button>
                        <button class="btn btn-success" onclick="runCommand('generate-all')">
                            <span>🎯</span>生成所有配置
                        </button>
                    </div>
                </div>
                
                <div class="card">
                    <h3>📄 配置输出</h3>
                    <div class="log-output" id="config-output">
选择上方按钮生成配置...
                    </div>
                </div>
            </div>
            
            <!-- 系统工具 -->
            <div id="tools" class="tab-content">
                <div class="card">
                    <h3>🔧 系统工具</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px;">
                        <button class="btn" onclick="runCommand('network-test')">
                            <span>🌐</span>网络测试
                        </button>
                        <button class="btn" onclick="runCommand('analyze-history')">
                            <span>📊</span>历史分析
                        </button>
                        <button class="btn" onclick="runCommand('cleanup')">
                            <span>🧹</span>清理文件
                        </button>
                        <button class="btn btn-warning" onclick="runCommand('restart-services')">
                            <span>🔄</span>重启服务
                        </button>
                    </div>
                </div>
                
                <div class="card">
                    <h3>📋 工具输出</h3>
                    <div class="log-output" id="tools-output">
选择工具开始使用...
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 选项卡切换
        document.querySelectorAll('.nav-btn').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
                button.classList.add('active');
                document.getElementById(button.dataset.tab).classList.add('active');
            });
        });

        // 更新当前时间
        function updateCurrentTime() {
            const now = new Date();
            document.getElementById('current-time').textContent = now.toLocaleString('zh-CN');
        }
        setInterval(updateCurrentTime, 1000);
        updateCurrentTime();

        // 添加日志
        function addLog(message, target = 'output') {
            const element = document.getElementById(target);
            const timestamp = new Date().toLocaleTimeString('zh-CN', { 
                hour12: false,
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
            const logEntry = `[${timestamp}] ${message}`;
            element.innerHTML = logEntry + '<br>' + element.innerHTML;
        }

        // 运行命令
        function runCommand(command) {
            addLog(`执行命令: ${command}`);
            
            const xhr = new XMLHttpRequest();
            const url = `/cgi-bin/iptv-web?action=${command}`;
            xhr.open('GET', url, true);
            xhr.timeout = 60000; // 60秒超时
            
            xhr.onload = function() {
                if (xhr.status === 200) {
                    let outputTarget = 'output';
                    switch(command) {
                        case 'list-channels':
                        case 'analyze-channels':
                            outputTarget = 'channels-output';
                            break;
                        case 'generate-m3u':
                        case 'generate-igmp':
                        case 'generate-udpxy':
                        case 'generate-all':
                            outputTarget = 'config-output';
                            break;
                        case 'network-test':
                        case 'analyze-history':
                        case 'cleanup':
                        case 'restart-services':
                            outputTarget = 'tools-output';
                            break;
                        default:
                            outputTarget = 'output';
                    }
                    
                    // 清理输出区域
                    document.getElementById(outputTarget).innerHTML = '';
                    addLog(xhr.responseText, outputTarget);
                } else {
                    addLog(`❌ 错误: 服务器返回状态 ${xhr.status}`);
                }
            };
            
            xhr.onerror = function() {
                addLog('❌ 错误: 无法连接到服务器');
                addLog('💡 请检查:');
                addLog('  1. uHTTPd服务是否运行: /etc/init.d/uhttpd status');
                addLog('  2. 防火墙是否允许80端口访问');
                addLog('  3. CGI脚本权限: chmod +x /www/cgi-bin/iptv-web');
            };
            
            xhr.ontimeout = function() {
                addLog('⏱️  警告: 请求超时，命令可能仍在执行中');
            };
            
            xhr.send();
        }

        // 高级监控
        function startAdvancedMonitor() {
            const interface = document.getElementById('monitor-interface').value;
            const duration = parseInt(document.getElementById('monitor-duration').value);
            
            addLog(`🚀 开始高级监控 - 接口: ${interface}, 时长: ${duration}秒`);
            
            // 显示进度条
            const progressContainer = document.getElementById('progress-container');
            const progressBar = document.getElementById('progress-bar');
            const progressText = document.getElementById('progress-text');
            
            progressContainer.style.display = 'block';
            progressBar.style.width = '0%';
            progressText.textContent = '0%';
            
            // 模拟进度
            let progress = 0;
            const interval = setInterval(() => {
                progress += 100 / duration;
                if (progress >= 100) {
                    progress = 100;
                    clearInterval(interval);
                    setTimeout(() => {
                        progressContainer.style.display = 'none';
                    }, 2000);
                }
                progressBar.style.width = progress + '%';
                progressText.textContent = Math.round(progress) + '%';
            }, 1000);
            
            runCommand(`advanced-monitor&interface=${interface}&duration=${duration}`);
        }

        // 页面加载时初始化
        document.addEventListener('DOMContentLoaded', function() {
            addLog('🎉 系统初始化完成');
            addLog('💡 提示: 使用前请先运行"快速测试"检查系统状态');
            addLog('🌐 访问: http://你的路由器IP/iptv/');
            
            // 更新系统状态
            updateSystemStatus();
            setInterval(updateSystemStatus, 30000); // 每30秒更新一次状态
        });

        // 更新系统状态
        function updateSystemStatus() {
            // 模拟状态更新
            const interfaces = ['eth1', 'eth0', 'br-lan'];
            const randomInterface = interfaces[Math.floor(Math.random() * interfaces.length)];
            const randomChannels = Math.floor(Math.random() * 50);
            
            document.getElementById('interface-status').textContent = randomInterface;
            document.getElementById('channels-count').textContent = randomChannels;
            document.getElementById('uptime-status').textContent = Math.floor(Math.random() * 24) + '小时';
        }
    </script>
</body>
</html>
EOF

    log "✅ 网页界面部署完成"
}

# 安装CGI脚本
install_cgi_scripts() {
    step "安装CGI脚本..."
    
    # 主CGI处理脚本
    cat > "$CGI_DIR/iptv-web" << 'EOF'
#!/bin/sh

echo "Content-type: text/plain"
echo ""

# 记录日志
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> /var/log/iptv_discovery/web_interface.log
}

# 获取动作参数
ACTION=$(echo "$QUERY_STRING" | sed -n 's/.*action=\([^&]*\).*/\1/p')

# 如果没有指定动作，显示帮助
if [ -z "$ACTION" ]; then
    echo "🎛️  IPTV Web Interface - 可用命令:"
    echo "========================================"
    echo "monitor           - 开始基础监控 (3分钟)"
    echo "quicktest         - 快速系统测试"
    echo "stop              - 停止所有监控"
    echo "realtime          - 启动实时监控 (1小时)"
    echo "list-channels     - 列出发现的频道"
    echo "analyze-channels  - 分析频道"
    echo "generate-m3u      - 生成M3U播放列表"
    echo "generate-igmp     - 生成IGMP配置"
    echo "generate-udpxy    - 生成udpxy配置"
    echo "generate-all      - 生成所有配置"
    echo "network-test      - 网络测试"
    echo "analyze-history   - 历史数据分析"
    echo "cleanup           - 清理临时文件"
    echo "restart-services  - 重启服务"
    echo ""
    echo "高级监控: advanced-monitor&interface=eth1&duration=180"
    echo "========================================"
    exit 0
fi

log "Web请求: $ACTION"

# 根据动作执行相应命令
case "$ACTION" in
    monitor)
        echo "🎬 开始基础IPTV流量监控..."
        echo "⏱️  预计时长: 3分钟"
        echo "========================================"
        /usr/bin/iptv-monitor
        ;;
        
    quicktest)
        echo "🧪 执行系统快速测试..."
        echo "========================================"
        /usr/bin/iptv-quicktest
        ;;
        
    stop)
        echo "⏹️  停止所有监控进程..."
        echo "========================================"
        pkill -f "iptv-monitor" && echo "✅ 基础监控已停止" || echo "ℹ️  基础监控未运行"
        pkill -f "iptv-realtime" && echo "✅ 实时监控已停止" || echo "ℹ️  实时监控未运行"
        pkill -f "tcpdump.*iptv" && echo "✅ 抓包进程已停止" || echo "ℹ️  无抓包进程运行"
        echo "✅ 所有监控进程已停止"
        ;;
        
    realtime)
        echo "🔴 启动实时监控守护进程..."
        echo "⏱️  运行时长: 1小时"
        echo "========================================"
        if pgrep -f "iptv-realtime" >/dev/null; then
            echo "✅ 实时监控已在运行 (PID: $(pgrep -f "iptv-realtime"))"
        else
            /usr/bin/iptv-realtime &
            echo "✅ 实时监控已启动 (PID: $!)"
            echo "📊 状态文件: /tmp/iptv_status.json"
        fi
        ;;
        
    list-channels)
        echo "📺 发现的IPTV频道列表"
        echo "========================================"
        RECENT_FILE=$(ls -t /tmp/iptv_streams_*.txt 2>/dev/null | head -1)
        if [ -n "$RECENT_FILE" ] && [ -f "$RECENT_FILE" ]; then
            echo "📄 数据文件: $(basename "$RECENT_FILE")"
            echo ""
            grep -E '^[0-9]+\s+[0-9]' "$RECENT_FILE" | head -20 | while read line; do
                COUNT=$(echo "$line" | awk '{print $1}')
                STREAM=$(echo "$line" | awk '{print $2}')
                echo "📡 $STREAM (出现: $COUNT 次)"
            done
            TOTAL=$(grep -cE '^[0-9]+\s+[0-9]' "$RECENT_FILE" 2>/dev/null || echo 0)
            echo ""
            echo "📊 总计: $TOTAL 个频道"
        else
            echo "❌ 未发现频道数据"
            echo "💡 请先运行监控功能"
        fi
        ;;
        
    analyze-channels)
        echo "🔍 频道分析报告"
        echo "========================================"
        RECENT_FILE=$(ls -t /tmp/iptv_streams_*.txt 2>/dev/null | head -1)
        if [ -n "$RECENT_FILE" ] && [ -f "$RECENT_FILE" ]; then
            echo "正在分析频道数据..."
            echo ""
            # 简单的分析
            TOTAL=$(grep -cE '^[0-9]+\s+[0-9]' "$RECENT_FILE" 2>/dev/null || echo 0)
            echo "📊 统计信息:"
            echo "  - 总频道数: $TOTAL"
            echo ""
            echo "🌐 IP段分布:"
            grep -E '^[0-9]+\s+[0-9]' "$RECENT_FILE" 2>/dev/null | awk '{print $2}' | cut -d. -f1-3 | sort | uniq -c | sort -nr | head -5 | while read line; do
                echo "  - $line"
            done
            echo ""
            echo "🔢 端口范围:"
            grep -E '^[0-9]+\s+[0-9]' "$RECENT_FILE" 2>/dev/null | awk '{print $2}' | cut -d: -f2 | sort -n | awk '
                NR==1{min=$1} 
                END{max=$1} 
                END{print "  - 端口范围: " min " - " max}'
        else
            echo "❌ 错误: 未找到频道数据文件"
        fi
        ;;
        
    generate-m3u)
        echo "📺 生成M3U播放列表..."
        echo "========================================"
        /usr/bin/iptv-generate-config m3u
        ;;
        
    generate-igmp)
        echo "🌐 生成IGMP代理配置..."
        echo "========================================"
        /usr/bin/iptv-generate-config igmp
        ;;
        
    generate-udpxy)
        echo "🔄 生成udpxy配置..."
        echo "========================================"
        /usr/bin/iptv-generate-config udpxy
        ;;
        
    generate-all)
        echo "🎯 生成所有IPTV配置..."
        echo "========================================"
        /usr/bin/iptv-generate-config all
        ;;
        
    network-test)
        echo "🌐 网络接口测试..."
        echo "========================================"
        echo "测试接口: eth1"
        echo "测试时长: 30秒"
        echo ""
        # 简单的网络测试
        if ip link show eth1 >/dev/null 2>&1; then
            echo "✅ 接口 eth1 存在"
            STATE=$(ip link show eth1 | grep -o "state [A-Z]*" | cut -d' ' -f2)
            echo "📡 接口状态: $STATE"
        else
            echo "❌ 接口 eth1 不存在"
        fi
        ;;
        
    analyze-history)
        echo "📊 历史数据分析"
        echo "========================================"
        echo "分析最近7天的数据..."
        echo ""
        HISTORY_FILES=$(find /tmp -name "iptv_streams_*.txt" -mtime -7 2>/dev/null | wc -l)
        CAPTURE_FILES=$(find /tmp/iptv_discovery -name "*.pcap" -mtime -7 2>/dev/null | wc -l)
        echo "📁 找到 $HISTORY_FILES 个流文件"
        echo "📁 找到 $CAPTURE_FILES 个抓包文件"
        echo ""
        echo "💡 提示: 完整功能请使用 iptv-analyze-history 命令"
        ;;
        
    cleanup)
        echo "🧹 清理临时文件..."
        echo "========================================"
        find /tmp -name "iptv_*" -mtime +1 -delete 2>/dev/null && echo "✅ 临时文件已清理" || echo "ℹ️  无临时文件可清理"
        find /tmp/iptv_discovery -name "*.pcap" -mtime +1 -delete 2>/dev/null && echo "✅ 抓包文件已清理" || echo "ℹ️  无抓包文件可清理"
        echo "✅ 清理完成"
        ;;
        
    restart-services)
        echo "🔄 重启Web服务..."
        echo "========================================"
        /etc/init.d/uhttpd restart 2>&1
        echo "✅ 服务重启完成"
        ;;
        
    advanced-monitor)
        INTERFACE=$(echo "$QUERY_STRING" | sed -n 's/.*interface=\([^&]*\).*/\1/p')
        DURATION=$(echo "$QUERY_STRING" | sed -n 's/.*duration=\([^&]*\).*/\1/p')
        INTERFACE=${INTERFACE:-eth1}
        DURATION=${DURATION:-180}
        
        echo "🎬 开始高级监控"
        echo "📡 接口: $INTERFACE"
        echo "⏱️  时长: $DURATION 秒"
        echo "========================================"
        
        # 设置临时环境变量
        export MONITOR_INTERFACE="$INTERFACE"
        export MONITOR_DURATION="$DURATION"
        
        /usr/bin/iptv-monitor
        ;;
        
    *)
        echo "❌ 错误: 未知动作 '$ACTION'"
        echo "💡 使用不带参数访问查看可用命令"
        ;;
esac

log "命令执行完成: $ACTION"
EOF

    chmod +x "$CGI_DIR/iptv-web"
    log "✅ CGI脚本安装完成"
}

# 创建配置文件
create_configuration() {
    step "创建配置文件..."
    
    cat > "$CONFIG_DIR/config" << 'EOF'
# IPTV自动发现系统配置文件
# 版本: 5.0
# 生成时间: $(date)

# 基本设置
MONITOR_INTERFACE=eth1
MONITOR_DURATION=180
CAPTURE_PACKETS=500

# 实时监控
REALTIME_DURATION=3600
ALERT_THRESHOLD=10

# 高级功能
AUTO_GENERATE_CONFIG=1
ENABLE_HISTORY_ANALYSIS=1

# 网络设置
TCPDUMP_FILTER=udp and portrange 10000-65000
IGNORE_PORTS=53,67,68,123,161,162,514
EOF

    log "✅ 配置文件创建完成"
}

# 配置uHTTPd服务器
configure_uhttpd() {
    step "配置Web服务器..."
    
    # 检查uHTTPd是否运行
    if ! pgrep uhttpd >/dev/null; then
        log "启动uHTTPd服务..."
        /etc/init.d/uhttpd start 2>/dev/null || warn "uHTTPd启动失败"
        /etc/init.d/uhttpd enable 2>/dev/null || warn "uHTTPd启用失败"
    fi
    
    # 确保防火墙允许访问
    if command -v iptables >/dev/null 2>&1; then
        iptables -I input_rule -p tcp --dport 80 -j ACCEPT 2>/dev/null && \
        log "✅ 防火墙规则已添加" || \
        warn "⚠️  防火墙规则添加失败"
    fi
    
    log "✅ Web服务器配置完成"
}

# 设置文件权限
set_permissions() {
    step "设置文件权限..."
    
    chmod +x "$CGI_DIR/iptv-web"
    chmod +x "$SCRIPT_DIR"/iptv-*
    chmod 755 "$WEB_DIR"
    
    log "✅ 文件权限设置完成"
}

# 验证安装
verify_installation() {
    step "验证安装..."
    
    echo ""
    echo "🔍 检查核心组件:"
    for component in iptv-monitor iptv-analyze iptv-quicktest; do
        if [ -x "$SCRIPT_DIR/$component" ]; then
            echo "  ✅ $component"
        else
            echo "  ❌ $component"
        fi
    done
    
    echo ""
    echo "🔍 检查网页文件:"
    for file in index.html; do
        if [ -f "$WEB_DIR/$file" ]; then
            echo "  ✅ $file"
        else
            echo "  ❌ $file"
        fi
    done
    
    echo ""
    echo "🔍 检查CGI脚本:"
    if [ -x "$CGI_DIR/iptv-web" ]; then
        echo "  ✅ iptv-web"
    else
        echo "  ❌ iptv-web"
    fi
    
    echo ""
    echo "🔍 检查服务状态:"
    if pgrep uhttpd >/dev/null; then
        echo "  ✅ uHTTPd服务运行中"
    else
        echo "  ❌ uHTTPd服务未运行"
    fi
    
    log "✅ 安装验证完成"
}

# 显示完成信息
show_completion() {
    # 获取本地IP
    LOCAL_IP=$(ip addr show br-lan 2>/dev/null | grep "inet " | awk '{print $2}' | cut -d/ -f1)
    if [ -z "$LOCAL_IP" ]; then
        LOCAL_IP=$(ip addr show | grep "inet " | grep -v "127.0.0.1" | head -1 | awk '{print $2}' | cut -d/ -f1)
    fi
    
    echo ""
    echo -e "${GREEN}╔══════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║              🎉 安装完成！                  ║${NC}"
    echo -e "${GREEN}║                                              ║${NC}"
    echo -e "${GREEN}║        🌐 访问地址: http://$LOCAL_IP/iptv/   ║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${BLUE}📋 快速开始指南:${NC}"
    echo "  1. 打开浏览器访问上述地址"
    echo "  2. 点击'快速测试'验证系统"
    echo "  3. 开始监控发现IPTV频道"
    echo "  4. 生成播放列表和配置"
    echo ""
    echo -e "${BLUE}🔧 常用命令:${NC}"
    echo "  手动监控: iptv-monitor"
    echo "  分析流量: iptv-analyze <文件>"
    echo "  系统测试: iptv-quicktest"
    echo "  生成配置: iptv-generate-config m3u"
    echo ""
    echo -e "${BLUE}📁 文件位置:${NC}"
    echo "  网页文件: $WEB_DIR/"
    echo "  配置文件: $CONFIG_DIR/config"
    echo "  日志文件: $LOG_DIR/"
    echo "  脚本文件: $SCRIPT_DIR/iptv-*"
    echo ""
    echo -e "${BLUE}🛠️  故障排除:${NC}"
    echo "  重启服务: /etc/init.d/uhttpd restart"
    echo "  查看日志: tail -f $LOG_DIR/web_interface.log"
    echo "  重新安装: 再次运行此脚本"
    echo ""
    echo -e "${GREEN}🚀 开始享受您的IPTV自动发现系统吧！${NC}"
}

# 主安装函数
main() {
    show_banner
    
    # 确认安装
    echo -n "开始安装IPTV自动发现系统？(Y/n): "
    read -r choice
    case "$choice" in
        n|N)
            log "安装已取消"
            exit 0
            ;;
        *)
            log "开始安装..."
            ;;
    esac
    
    # 执行安装步骤
    check_system
    check_root
    check_network
    install_dependencies
    create_directories
    install_core_scripts
    install_web_interface
    install_cgi_scripts
    create_configuration
    configure_uhttpd
    set_permissions
    verify_installation
    show_completion
    
    echo ""
    log "🎊 安装完成！感谢使用IPTV自动发现系统"
}

# 运行主函数
main "$@"

